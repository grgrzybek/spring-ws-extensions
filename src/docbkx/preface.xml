<?xml version="1.0" encoding="UTF-8"?>

<preface xml:id="preface" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
	<title>Preface</title>
	<epigraph>
		<attribution>Diary of Dreams</attribution>
		<para>First, there was darkness...</para>
	</epigraph>
	<epigraph>
		<attribution>Me</attribution>
		<para>Then came Spring-WS</para>
	</epigraph>
	<simplesect>
		<title>Dark Ages</title>
		<para>
			In the Dark Ages of Web Services, WSDL documents were generated by expensive graphical tools. Then Java artifacts were generated, leaving programmers
			with hard to maintain but critical code. This code was used at runtime as an intermediary layer between SOAP/HTTP and service code.
		</para>
		<para>
			There were many problems, as the generated code constitued a large percentage of total Web Service code. It was often not obvious what happened between
			SOAP message receipt and service code invocation.
		</para>
	</simplesect>
	<simplesect>
		<title>Spring-WS Revolution</title>
		<para>
			When Spring-WS was released the nightmare was over. There was no generated code (except for XML Schema based domain model - e.g. JAXB2) and it was the
			developer who had control over dispatching SOAP requests. The key concepts were
			<interfacename>EndpointMapping</interfacename>
			and
			<interfacename>EndpointAdapter</interfacename>
			interfaces. With Spring-WS dispatching could be based on SOAP Action, WS-Addressing or XML fully qualified element. This gives great power and makes
			maintenance and debugging easier.
		</para>
		<para>
			The main theme of Spring-WS is
			<emphasis>contract-first</emphasis>
			and
			<emphasis>thinking in terms of XML</emphasis>
			. This is
			<emphasis>good thing</emphasis>
			. The most important artifact in Web Services development is XML Schema document, which defines all types and global elements which represent the messages
			exchanged in Web Services invocations.
		</para>
		<para>
			But here is the place where little problems begin. Despite of thinking in terms of Documents instead of RPC, in practice all exchanged XML documents
			represent some kind of
			<emphasis>command objects</emphasis>
			. And here comes the term
			<literal>WRAPPED DOCUMENT LITERAL</literal>
			.
		</para>
		<para>
			After few years of working with Spring-WS based projects, I've come to conclusion that there is one little thing that could be avoided - creating XML
			element
			wrappers for the actual payload of exchanged XML documents. It would be much easier if endpoint methods could take
			<emphasis>unwrapped</emphasis>
			arguments and the developer could be freed from creating these wrappers in XML Schema (which, among others, requires following specific convention when
			naming these elements).
		</para>
	</simplesect>
	<simplesect>
		<title>JAX-WS 2</title>
		<para>
			JAX-WS (JSR 224) explicitely defines what
			<literal>WRAPPED DOCUMENT LITERAL</literal>
			is (2.3.1.2 Wrapper Style). JAX-WS along with JSR-181 (Web Services Metadata for the Java Platform) define standard model for developing Web Services to be
			run on
			JavaEE compliant servers. Spring has always been great at taking what's best in JavaEE specifications and making it pleasure for use.
		</para>
		<para>
			The goal of this project is to make possible to use JSR-181 and JSR-224 (along with JSR-222 - JAXB2) annotations in Spring-WS based projects. Continuing
			the
			tradition, here are the main goals:
			<itemizedlist>
				<listitem>
					<para>
						Programming model based on JSR-181 and JAX-WS annotations +
						<interfacename>EndpointMapping</interfacename>
						/
						<interfacename>EndpointAdapter</interfacename> mechanisms,
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Contract-first</emphasis>
						development based on XML Schema without the need to create wrapper elements/types,
					</para>
				</listitem>
				<listitem>
					<para>Independence of application-servers' provided JAX-WS implementations,</para>
				</listitem>
				<listitem>
					<para>Generation of clean and readable WSDL/XSD documents conforming to JAX-WS/JSR-181 annotations.</para>
				</listitem>
			</itemizedlist>
		</para>
	</simplesect>
</preface>
