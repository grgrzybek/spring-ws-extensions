/*
 * Copyright 2005-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.ws.axis1.case1;

import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.wsdl.Java2WSDL;
import org.apache.axis.wsdl.WSDL2Java;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.util.ClassUtils;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StringUtils;
import org.springframework.ws.axis1.Axis1IntegrationTests;
import org.springframework.ws.axis1.case1.codefirst.EchoEndpoint;

/**
 * <p></p>
 *
 * @author Grzegorz Grzybek
 */
public class Case1Test extends Axis1IntegrationTests {

	private static Logger log = LoggerFactory.getLogger(Case1Test.class.getName());

	@Test
	public void axis1WebServices() throws Exception {

		super.isolatedAxis1Test(new Callback() {
			@Override
			public void perform(int port) throws Exception {

				try {
					// we take WSDD files generated by WSDL2Java, not from Java2WSDL, as the former have proper package names
					log.info("start");
					List<String> errors = new LinkedList<String>();
					for (String style: new String[] { "DOCUMENT", "RPC", "WRAPPED" }) {
						for (String use: new String[] { "LITERAL", "ENCODED" }) {
							for (String tmVersion: new String[] { "1.1", "1.2" }) {
								if ("LITERAL".equals(use) && "1.1".equals(tmVersion))
									continue;
								try {
									echo(port, style, use, tmVersion);
								}
								catch (Exception e) {
									log.warn(e.getMessage());
									errors.add(String.format("%s/%s/%s: %s", style, use, tmVersion, e.getMessage()));
								}
							}
						}
					}
					for (String error: errors)
						log.error(error);
				}
				catch (Exception e) {
					log.error(e.getMessage(), e);
				}
			}
		});

	}

	/**
	 * @param style
	 * @param use
	 * @param tmVersion
	 * @param wrapArrays
	 */
	public static void echo(int port, String style, String use, String tmVersion) throws Exception {
		String packageFragment = String.format("%s_%s_%s", style.toLowerCase(), use.toLowerCase(), tmVersion.replace(".", ""));
		String locatorMethod = String.format("getEchoEndpoint%s%s%s", StringUtils.capitalize(style.toLowerCase()), StringUtils.capitalize(use.toLowerCase()), tmVersion.replace(".", ""));
		Constructor<?> ctr = ClassUtils.getConstructorIfAvailable(ClassUtils.forName("org.springframework.ws.axis1.case1.contractfirst." + packageFragment + ".EchoEndpointServiceLocator", Case1Test.class.getClassLoader()), EngineConfiguration.class);
		Constructor<?> oneParamCtr = null;
		Constructor<?> twoParamsCtr = null;
		try {
			oneParamCtr = ClassUtils.getConstructorIfAvailable(ClassUtils.forName("org.springframework.ws.axis1.case1.contractfirst." + packageFragment + ".OneParam", Case1Test.class.getClassLoader()), String.class);
			twoParamsCtr = ClassUtils.getConstructorIfAvailable(ClassUtils.forName("org.springframework.ws.axis1.case1.contractfirst." + packageFragment + ".TwoParams", Case1Test.class.getClassLoader()), String.class, String.class);
		}
		catch (Exception e) {
		}

		String deployment = FileCopyUtils.copyToString(new FileReader("src/test/java/org/springframework/ws/axis1/case1/contractfirst/" + packageFragment + "/deploy.wsdd"));
		deployment = deployment.replace("<!-- Services from EchoEndpointService WSDL service -->",
				"<globalConfiguration>\n" + 
				"	<parameter name='sendXsiTypes' value='true' />\n" + 
				"	<!--parameter name='sendMultiRefs' value='true' /-->\n" + 
				"	<!--parameter name='axis.sendMinimizedElements' value='true' /-->\n" + 
				"	<requestFlow>\n" + 
				"		<handler type='log' />\n" + 
				"	</requestFlow>\n" + 
				"	<responseFlow>\n" + 
				"		<handler type='log' />\n" + 
				"	</responseFlow>\n" + 
				"</globalConfiguration>\n" + 
				"\n" + 
				"<handler name='log' type='java:org.apache.axis.handlers.LogHandler'>\n" + 
				"	<parameter name='LogHandler.fileName' value='target/axis1.log' />\n" + 
				"</handler>\n" + 
				"\n" + 
				"<transport name='http' pivot='java:org.apache.axis.transport.http.HTTPSender' />"
				);
		FileProvider fileProvider = new FileProvider(new ByteArrayInputStream(deployment.getBytes()));

		Object locator = ctr.newInstance(fileProvider);
		Object client = ReflectionTestUtils.invokeMethod(locator, locatorMethod, new URL("http://localhost:" + port + "/axis1/" + locatorMethod.substring(3)));
		if (!("WRAPPED".equals(style) && "ENCODED".equals(use))) {
			ReflectionTestUtils.invokeMethod(client, "oneParam", "param");
			ReflectionTestUtils.invokeMethod(client, "twoParams", "param1", "param2");
		} else {
			ReflectionTestUtils.invokeMethod(client, "oneParam", oneParamCtr.newInstance("param"));
			ReflectionTestUtils.invokeMethod(client, "twoParams", twoParamsCtr.newInstance("param1", "param2"));
		}
	}

	/**
	 * Generating all default artifacts
	 * 
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
//		java2wsdl("DOCUMENT", "LITERAL", "1.2");
//		java2wsdl("DOCUMENT", "ENCODED", "1.1");
//		java2wsdl("DOCUMENT", "ENCODED", "1.2");
//		java2wsdl("RPC", "LITERAL", "1.2");
//		java2wsdl("RPC", "ENCODED", "1.1");
//		java2wsdl("RPC", "ENCODED", "1.2");
//		java2wsdl("WRAPPED", "LITERAL", "1.2");
//		java2wsdl("WRAPPED", "ENCODED", "1.1");
//		java2wsdl("WRAPPED", "ENCODED", "1.2");
//		wsdl2java("DOCUMENT", "LITERAL", "1.2");
//		wsdl2java("DOCUMENT", "ENCODED", "1.1");
//		wsdl2java("DOCUMENT", "ENCODED", "1.2");
//		wsdl2java("RPC", "LITERAL", "1.2");
//		wsdl2java("RPC", "ENCODED", "1.1");
//		wsdl2java("RPC", "ENCODED", "1.2");
//		wsdl2java("WRAPPED", "LITERAL", "1.2");
//		wsdl2java("WRAPPED", "ENCODED", "1.1");
//		wsdl2java("WRAPPED", "ENCODED", "1.2");
	}

	/**
	 * @param style
	 * @param use
	 * @param tmVersion
	 */
	@SuppressWarnings("unused")
	private static void java2wsdl(String style, String use, String tmVersion) {
		Java2WSDL.main(new String[] {
				EchoEndpoint.class.getName(),
				"-l",
				"http://axis1.org/ws/services/EchoEndpoint" + (StringUtils.capitalize(style.toLowerCase()) + (StringUtils.capitalize(use.toLowerCase())) + tmVersion.replace(".", "")),
				"-o", "src/test/resources/" + EchoEndpoint.class.getPackage().getName().replace(".", "/") + "/" + (style.toLowerCase() + "_" + use.toLowerCase()) + "/myservice-" + tmVersion + ".wsdl",
				"-A", "OPERATION",
				"-y", style,
				"-u", use,
				"-T", tmVersion,
				"-d"
		});
	}

	/**
	 * @param style
	 * @param use
	 * @param tmVersion
	 */
	@SuppressWarnings("unused")
	private static void wsdl2java(String style, String use, String tmVersion) {
		List<String> params = new LinkedList<String>();
		params.add("-o");
		params.add("src/test/java");
		params.add("-s");
		params.add("-p");
		params.add("org.springframework.ws.axis1.case1.contractfirst." + style.toLowerCase() + "_" + use.toLowerCase() + "_" + tmVersion.replace(".", ""));
		params.add("-H");
		params.add("src/test/resources/org/springframework/ws/axis1/case1/codefirst/" + style.toLowerCase() + "_" + use.toLowerCase() +"/myservice-" + tmVersion + ".wsdl");
		WSDL2Java.main(params.toArray(new String[0]));
	}

}
